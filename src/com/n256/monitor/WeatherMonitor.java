/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.n256.monitor;

import com.n256.entity.MonitorProfileData;
import com.n256.entity.SensorData;
import com.n256.service.IMonitorUIListener;
import java.rmi.RemoteException;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nishan
 */
public class WeatherMonitor extends javax.swing.JFrame implements IMonitorUIListener{
    //Declare WeatherClient reference
    WeatherClient client = null;
    //Linitialize listModel to use with listbox
    DefaultListModel listModel;
    //Used to store faulty sensors receaved by server (Faulty sensors means sensors which doesn't sent data in specific time period)
    HashSet<String> faultySensors = new HashSet<String>();
    //Used to store sensors gave critical rainfall reading values
    HashSet<String> criticalRainfallSensors = new HashSet<>();
    //Used to store sensors gave critical temperature reading value
    HashSet<String> criticalTemperatureSensors = new HashSet<>();
    //Used to store information of This monitor.
    MonitorProfileData monitorData = new MonitorProfileData();
    
    /**
     * Creates new form WeatherMonitor
     */
    public WeatherMonitor() {
        this.listModel = new DefaultListModel();
        initComponents();
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        serverWarningListBox = new javax.swing.JList<>();
        btnClearWariningList = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblMonitorCount = new javax.swing.JLabel();
        lblSensorCount = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSensorList = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnCommitData = new javax.swing.JButton();
        txtSearchSensor = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 0, 36)); // NOI18N
        jLabel1.setText("Weather Monitor");

        serverWarningListBox.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(serverWarningListBox);

        btnClearWariningList.setBackground(new java.awt.Color(51, 51, 51));
        btnClearWariningList.setText("Clear");
        btnClearWariningList.setActionCommand("btnClearWariningList");
        btnClearWariningList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearWariningListActionPerformed(evt);
            }
        });

        jLabel3.setText("Current Monitors: ");

        jLabel4.setText("Current Sensors: ");

        lblMonitorCount.setText("#");

        lblSensorCount.setText("#");

        tableSensorList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Location", "Temperature", "Rainfall", "Humidity", "Air Pressure"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableSensorList);

        jLabel5.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 102, 0));
        jLabel5.setText("Warnings");

        jLabel6.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 153, 0));
        jLabel6.setText("Connected Sensors");

        jLabel8.setText("Name:");

        jLabel7.setText("Location:");

        btnCommitData.setText("Commit");
        btnCommitData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommitDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCommitData)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLocation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCommitData, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        txtSearchSensor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchSensorKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchSensorKeyReleased(evt);
            }
        });

        jLabel2.setText("Search");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMonitorCount)
                                .addGap(53, 53, 53)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblSensorCount))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClearWariningList))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchSensor, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(btnClearWariningList))
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(lblMonitorCount)
                            .addComponent(lblSensorCount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtSearchSensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnClearWariningList.getAccessibleContext().setAccessibleName("btnClearWarningList");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        txtName.getCursor();
    }//GEN-LAST:event_formWindowOpened

    private void btnClearWariningListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearWariningListActionPerformed
        //Do if user client clear button
        
        //clear listmodel
        listModel.clear();
        
        //clear faultysensor list
        faultySensors.clear();
        
        //clear criticalRainfallSensors list
        criticalRainfallSensors.clear();
        
        //clear criticalTemperatureSensors list
        criticalTemperatureSensors.clear();
        
        //set new cleared listModel to serverWarningListBox
        serverWarningListBox.setModel(listModel);
    }//GEN-LAST:event_btnClearWariningListActionPerformed

    //Do if Commit button click
    private void btnCommitDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCommitDataActionPerformed
        
        //Get name and location from user and store in variables
        String name = txtName.getText();
        String location = txtLocation.getText();
        
        //If both name and location empty, do
        if(!name.trim().equals("") && !location.trim().equals(""))
        {
            //set name and location in monitorData object
            this.monitorData.setLocation(location);
            this.monitorData.setName(name);
            
            
            try {
                //create object of WeatherClient class and pass this object of this class to it.
                //Refer WeatherClient class for more information.
                client = new WeatherClient(this);
                
                
                
                //Show server message in MessageBox.
                JOptionPane.showMessageDialog(null, "Message from server admin: "+client.getServerData().getMessage());
                //listModel.clear();
                serverWarningListBox.setModel(listModel);
                                
            } catch (RemoteException ex) {
                JOptionPane.showMessageDialog(null, ex.toString());
            }
            txtLocation.setEnabled(false);
            txtName.setEnabled(false);
            btnCommitData.setEnabled(false);
        }
    }//GEN-LAST:event_btnCommitDataActionPerformed

    private void txtSearchSensorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchSensorKeyPressed
        
    }//GEN-LAST:event_txtSearchSensorKeyPressed

    private void txtSearchSensorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchSensorKeyReleased
        String searchLocation = txtSearchSensor.getText();
        if(searchLocation.equalsIgnoreCase(""))
        {
            tableSensorList.clearSelection();
            return;
        }
        for(int i=0; i<tableSensorList.getRowCount(); i++)
        {
            if(tableSensorList.getValueAt(i, 0).toString().toLowerCase().contains(searchLocation.toLowerCase()))
            {
                tableSensorList.setRowSelectionInterval(i, i);
                break;
            }
            tableSensorList.clearSelection();
        }
    }//GEN-LAST:event_txtSearchSensorKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeatherMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeatherMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeatherMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeatherMonitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WeatherMonitor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearWariningList;
    private javax.swing.JButton btnCommitData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMonitorCount;
    private javax.swing.JLabel lblSensorCount;
    private javax.swing.JList<String> serverWarningListBox;
    private javax.swing.JTable tableSensorList;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSearchSensor;
    // End of variables declaration//GEN-END:variables


    /*
    * Below @Override annotationed methods call by WeatherClient.
    */
    
    //This method is called when faultySensor detected by server (Faulty sensor mean a sensor which does not send information in specific time period)
    @Override
    public void informFaultSensor(SensorData sensorData) {
        
        //If that sensor is not in faultysensor list, add sensor to list and make message and show in list box
        if(!faultySensors.contains(sensorData.getLocation()))
        {
            String informationMessage = "Server couldn't recieve any responce from sensor in "+sensorData.getLocation()+" within last hour. Its better to check it";
            listModel.addElement(informationMessage);
            serverWarningListBox.setModel(listModel);
            faultySensors.add(sensorData.getLocation());
        }
    }

    //This method will called by WeatherClient to inform Monitor count connected to server
    @Override
    public void updateMonitorCount(int monitorCount) {
        lblMonitorCount.setText(String.valueOf(monitorCount));
    }

    //This method will called by WeatherClient to inform Sensor count connected to server
    @Override
    public void updateSensorCount(int sensorCount) {
        lblSensorCount.setText(String.valueOf(sensorCount));
    }

    //This method will set tablemodel from WeatherClient
    @Override
    public void updateSensorList(DefaultTableModel table) {
        System.out.println("UPDATE SENSOR LIST --------------------------------");        
        tableSensorList.setModel(table);
    }
    
    //This method will called by WeatherClient when it recives criticalRainfall sensor data from server
    @Override
    public void informCriticalRainfall(SensorData sensorData) {
        
        //If that sensor is not in criticalRainfallSensors list, add sensor to list and make message and show in list box
        if(!criticalRainfallSensors.contains(sensorData.getLocation()))
        {
            String informationMessage = "Server detected critical rainfall "+sensorData.getRainfall()+"mm ( > 20mm) in "+sensorData.getLocation()+". Get some action immediatly";
            listModel.addElement(informationMessage);
            serverWarningListBox.setModel(listModel);
            criticalRainfallSensors.add(sensorData.getLocation());
        }
    }

    //This method will called by WeatherClient when it recives criticalTemperature sensor data from server
    @Override
    public void informCriticalTemperature(SensorData sensorData) {
        //If that sensor is not in criticalTemperatureSensors list, add sensor to list and make message and show in list box
        if(!criticalTemperatureSensors.contains(sensorData.getLocation()))
        {
            String informationMessage = "Server detected critical temperature "+sensorData.getTemperature()+" C (20 C > temp > 35 C ) in "+sensorData.getLocation()+". Get some action immediatly";
            listModel.addElement(informationMessage);
            serverWarningListBox.setModel(listModel);
            criticalTemperatureSensors.add(sensorData.getLocation());
        }
    }
}
